// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: habittracker.proto

package habittracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HabitApiClient is the client API for HabitApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HabitApiClient interface {
	CreateHabit(ctx context.Context, in *Habit, opts ...grpc.CallOption) (*Habit, error)
	ListHabits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HabitList, error)
	UpdateHabit(ctx context.Context, in *Habit, opts ...grpc.CallOption) (*Habit, error)
	DeleteHabit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type habitApiClient struct {
	cc grpc.ClientConnInterface
}

func NewHabitApiClient(cc grpc.ClientConnInterface) HabitApiClient {
	return &habitApiClient{cc}
}

func (c *habitApiClient) CreateHabit(ctx context.Context, in *Habit, opts ...grpc.CallOption) (*Habit, error) {
	out := new(Habit)
	err := c.cc.Invoke(ctx, "/protoapi.HabitApi/CreateHabit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitApiClient) ListHabits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HabitList, error) {
	out := new(HabitList)
	err := c.cc.Invoke(ctx, "/protoapi.HabitApi/ListHabits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitApiClient) UpdateHabit(ctx context.Context, in *Habit, opts ...grpc.CallOption) (*Habit, error) {
	out := new(Habit)
	err := c.cc.Invoke(ctx, "/protoapi.HabitApi/UpdateHabit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *habitApiClient) DeleteHabit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/protoapi.HabitApi/DeleteHabit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HabitApiServer is the server API for HabitApi service.
// All implementations must embed UnimplementedHabitApiServer
// for forward compatibility
type HabitApiServer interface {
	CreateHabit(context.Context, *Habit) (*Habit, error)
	ListHabits(context.Context, *emptypb.Empty) (*HabitList, error)
	UpdateHabit(context.Context, *Habit) (*Habit, error)
	DeleteHabit(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
}

// UnimplementedHabitApiServer must be embedded to have forward compatible implementations.
type UnimplementedHabitApiServer struct {
}

func (UnimplementedHabitApiServer) CreateHabit(context.Context, *Habit) (*Habit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHabit not implemented")
}
func (UnimplementedHabitApiServer) ListHabits(context.Context, *emptypb.Empty) (*HabitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHabits not implemented")
}
func (UnimplementedHabitApiServer) UpdateHabit(context.Context, *Habit) (*Habit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHabit not implemented")
}
func (UnimplementedHabitApiServer) DeleteHabit(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHabit not implemented")
}

func RegisterHabitApiServer(s grpc.ServiceRegistrar, srv HabitApiServer) {
	s.RegisterService(&HabitApi_ServiceDesc, srv)
}

func _HabitApi_CreateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Habit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitApiServer).CreateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.HabitApi/CreateHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitApiServer).CreateHabit(ctx, req.(*Habit))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitApi_ListHabits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitApiServer).ListHabits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.HabitApi/ListHabits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitApiServer).ListHabits(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitApi_UpdateHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Habit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitApiServer).UpdateHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.HabitApi/UpdateHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitApiServer).UpdateHabit(ctx, req.(*Habit))
	}
	return interceptor(ctx, in, info, handler)
}

func _HabitApi_DeleteHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HabitApiServer).DeleteHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoapi.HabitApi/DeleteHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HabitApiServer).DeleteHabit(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// HabitApi_ServiceDesc is the grpc.ServiceDesc for HabitApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HabitApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoapi.HabitApi",
	HandlerType: (*HabitApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHabit",
			Handler:    _HabitApi_CreateHabit_Handler,
		},
		{
			MethodName: "ListHabits",
			Handler:    _HabitApi_ListHabits_Handler,
		},
		{
			MethodName: "UpdateHabit",
			Handler:    _HabitApi_UpdateHabit_Handler,
		},
		{
			MethodName: "DeleteHabit",
			Handler:    _HabitApi_DeleteHabit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "habittracker.proto",
}
